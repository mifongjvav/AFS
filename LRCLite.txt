//Label作为新歌词列表初始化
//Label歌词是
//String歌词
//Label歌词播完后
//String歌词结束后延迟
//Label秒结束
function 函数_3(歌词, 歌词结束后延迟) {
  定义脚本变量("脚本变量_歌词显示", "脚本变量_i", "脚本变量_当前歌词", "脚本变量_歌词", "脚本变量_over", "脚本变量_预处理", "脚本变量_歌词列表", "脚本变量_m", "脚本变量_s");
  脚本变量_歌词显示 = 1;
  脚本变量_预处理 = 临时列表();
  脚本变量_歌词列表 = 临时列表();
  脚本变量_m = 临时列表();
  脚本变量_s = 临时列表();
  一步执行(() => {
    脚本变量_歌词 = 歌词;
    复制列表项(分开字符串(脚本变量_歌词, "|"), 脚本变量_预处理);
    脚本变量_i = 2;
    重复直到(脚本变量_i === 列表长度(脚本变量_预处理), () => {
      if (判断列表值是否存在("列表_1", 脚本变量_i)) {
        添加列表项(列表值(脚本变量_预处理, "第", 脚本变量_i), 脚本变量_歌词列表);
      } else if (判断列表值是否存在("列表_2", 脚本变量_i)) {
        添加列表项(列表值(脚本变量_预处理, "第", 脚本变量_i), 脚本变量_m);
      } else if (判断列表值是否存在("列表_3", 脚本变量_i)) {
        添加列表项(列表值(脚本变量_预处理, "第", 脚本变量_i), 脚本变量_s);
      }
      改变变量("脚本变量_i", "增加", 1);
    });
  });
  添加列表项(列表值(脚本变量_预处理, "最后一项"), 脚本变量_歌词列表);
  设置文字字号(24);
  设置文字颜色("#ffffff");
  执行计时器("开始");
  设置计时器状态("隐藏");
  if (脚本变量_歌词显示 === 1) {
    重复循环(列表长度(脚本变量_m), () => {
      改变变量("脚本变量_当前歌词", "增加", 1);
      等待直到(计时器值() >= 列表值(脚本变量_m, "第", 脚本变量_当前歌词) * 60 + 列表值(脚本变量_s, "第", 脚本变量_当前歌词));
      逐渐改变角色状态(0.1, "逐渐隐藏");
      将角色变为文字(列表值(脚本变量_歌词列表, "第", 脚本变量_当前歌词));
      逐渐改变角色状态(0.1, "逐渐显示");
    });
    逐渐改变角色状态(0.1, "逐渐隐藏");
    等待秒数(歌词结束后延迟);
    脚本变量_over = 1;
  }
}
//Label作为新歌词列表初始化
//Label播放
//Audio声音
//Label歌词是
//String歌词
//Label歌词播完后
//String歌词结束后延迟
//Label秒结束
function 函数_2(声音, 歌词, 歌词结束后延迟) {
  定义脚本变量("脚本变量_歌词显示", "脚本变量_i", "脚本变量_当前歌词", "脚本变量_歌词", "脚本变量_over", "脚本变量_预处理", "脚本变量_歌词列表", "脚本变量_m", "脚本变量_s");
  脚本变量_歌词显示 = 1;
  脚本变量_预处理 = 临时列表();
  脚本变量_歌词列表 = 临时列表();
  脚本变量_m = 临时列表();
  脚本变量_s = 临时列表();
  一步执行(() => {
    脚本变量_歌词 = 歌词;
    复制列表项(分开字符串(脚本变量_歌词, "|"), 脚本变量_预处理);
    脚本变量_i = 2;
    重复直到(脚本变量_i === 列表长度(脚本变量_预处理), () => {
      if (判断列表值是否存在("列表_1", 脚本变量_i)) {
        添加列表项(列表值(脚本变量_预处理, "第", 脚本变量_i), 脚本变量_歌词列表);
      } else if (判断列表值是否存在("列表_2", 脚本变量_i)) {
        添加列表项(列表值(脚本变量_预处理, "第", 脚本变量_i), 脚本变量_m);
      } else if (判断列表值是否存在("列表_3", 脚本变量_i)) {
        添加列表项(列表值(脚本变量_预处理, "第", 脚本变量_i), 脚本变量_s);
      }
      改变变量("脚本变量_i", "增加", 1);
    });
  });
  添加列表项(列表值(脚本变量_预处理, "最后一项"), 脚本变量_歌词列表);
  设置文字字号(24);
  设置文字颜色("#ffffff");
  执行计时器("开始");
  设置计时器状态("隐藏");
  if (变量_静音 === 0) {
    播放声音(声音);
  }
  if (脚本变量_歌词显示 === 1) {
    重复循环(列表长度(脚本变量_m), () => {
      改变变量("脚本变量_当前歌词", "增加", 1);
      等待直到(计时器值() >= 列表值(脚本变量_m, "第", 脚本变量_当前歌词) * 60 + 列表值(脚本变量_s, "第", 脚本变量_当前歌词));
      逐渐改变角色状态(0.1, "逐渐隐藏");
      将角色变为文字(列表值(脚本变量_歌词列表, "第", 脚本变量_当前歌词));
      逐渐改变角色状态(0.1, "逐渐显示");
    });
    逐渐改变角色状态(0.1, "逐渐隐藏");
    等待秒数(歌词结束后延迟);
    脚本变量_over = 1;
  }
}
//Label歌词初始化
function 函数_1() {
  定义脚本变量("脚本变量_a");
  添加列表项(1, "列表_1");
  添加列表项(2, "列表_2");
  添加列表项(3, "列表_3");
  一步执行(() => {
    脚本变量_a = 1;
    重复循环(999, () => {
      改变变量("脚本变量_a", "增加", 3);
      添加列表项(脚本变量_a, "列表_1");
    });
    脚本变量_a = 2;
    重复循环(999, () => {
      改变变量("脚本变量_a", "增加", 3);
      添加列表项(脚本变量_a, "列表_2");
    });
    脚本变量_a = 3;
    重复循环(999, () => {
      改变变量("脚本变量_a", "增加", 3);
      添加列表项(脚本变量_a, "列表_3");
    });
  });
}
函数_1();
函数_2(0, 0, 0);
函数_3(0, 0);
