//Label顺序颠倒
//String字符串
function 函数_数_字符_11(字符串) {
  函数返回(选择字符串(字符串, 字符串长度(字符串), 1));
}
函数_数_字符_11("minecraft");

//Label重复
//Stringn
//Label遍
//String字符串
function 函数_数_字符_13(n, 字符串) {
  一步执行(() => {
    定义脚本变量("脚本变量_a");
    脚本变量_a = 字符串;
    重复循环(n - 1, () => {
      脚本变量_a = 连接字符串(脚本变量_a, 字符串);
    });
    函数返回(脚本变量_a);
  });
}
函数_数_字符_13(3, "minecraft");

//Label从
//String字符串
//Label中删去
//String字符
function 函数_数_字符_5(字符串, 字符) {
  一步执行(() => {
    定义脚本变量("脚本变量_a");
    脚本变量_a = "";
    遍历循环(1, 字符串长度(字符串), 1, i => {
      if (!字符串包含判断(字符, 选择字符串(字符串, i, 1))) {
        脚本变量_a = 连接字符串(脚本变量_a, 选择字符串(字符串, i, 1));
      }
    });
    函数返回(脚本变量_a);
  });
}
函数_数_字符_5("minecraft", "ace");

//Label删除
//String字符串
//Label的第
//String头
//Label到第
//String尾
//Label位字符
function 函数_数_字符_6(字符串, 头, 尾) {
  一步执行(() => {
    定义脚本变量("脚本变量_a");
    脚本变量_a = "";
    遍历循环(1, 字符串长度(字符串), 1, i => {
      if (i < 头 || i > 尾) {
        脚本变量_a = 连接字符串(脚本变量_a, 选择字符串(字符串, i, 1));
      }
    });
    函数返回(脚本变量_a);
  });
}
函数_数_字符_6("minecraft", 1, 4);

//Label插入
//String字符
//Label到
//String字符串
//Label的第
//Stringn
//Label位
function 函数_数_字符_7(字符, 字符串, n) {
  定义脚本变量("脚本变量_a", "脚本变量_b");
  if (n > 1) {
    脚本变量_a = 选择字符串(字符串, 1, n - 1);
    脚本变量_b = 选择字符串(字符串, n, 字符串长度(字符串));
    函数返回(连接字符串(脚本变量_a, 字符, 脚本变量_b));
  } else {
    脚本变量_a = 选择字符串(字符串, 1, 字符串长度(字符串));
    函数返回(连接字符串(字符, 脚本变量_a));
  }
}
函数_数_字符_7("ine", "mcraft", 2);

//Label替换
//String字符串
//Label中的
//String字符
//Label为
//String目标字符
function 函数_数_字符_12(字符串, 字符, 目标字符) {
  一步执行(() => {
    定义脚本变量("脚本变量_a");
    脚本变量_a = "";
    遍历循环(1, 字符串长度(字符串), 1, i => {
      if (字符串包含判断(字符, 选择字符串(字符串, i, 1))) {
        脚本变量_a = 连接字符串(脚本变量_a, 目标字符);
      } else {
        脚本变量_a = 连接字符串(脚本变量_a, 选择字符串(字符串, i, 1));
      }
    });
    函数返回(脚本变量_a);
  });
}
函数_数_字符_12("abc", "abc", "abc");

//String字符串
//Label中第
//Stringn
//Label个
//String字符
//Label的位置
function 函数_数_字符_4(字符串, n, 字符) {
  一步执行(() => {
    定义脚本变量("脚本变量_a");
    脚本变量_a = 临时列表();
    遍历循环(1, 字符串长度(字符串), 1, i => {
      if (选择字符串(字符串, i, 1) === 连接字符串(字符)) {
        添加列表项(i, 脚本变量_a);
      }
    });
    if (n > 列表长度(脚本变量_a) || n === 0) {
      函数返回(0);
    } else {
      函数返回(列表值(脚本变量_a, "第", n));
    }
  });
}
函数_数_字符_4("minecraft", 1, "c");

//CustomMax["Max","Min"]
//List列表
function 函数_数_字符_1(Max, 列表) {
  一步执行(() => {
    定义脚本变量("脚本变量_a");
    脚本变量_a = "";
    遍历循环(1, 列表长度(列表), 1, i => {
      if (Max === "Max" && (脚本变量_a === "" || 脚本变量_a < 列表值(列表, "第", i))) {
        脚本变量_a = 列表值(列表, "第", i);
      } else if (Max === "Min" && (脚本变量_a === "" || 脚本变量_a > 列表值(列表, "第", i))) {
        脚本变量_a = 列表值(列表, "第", i);
      }
    });
    函数返回(脚本变量_a);
  });
}
函数_数_字符_1("Max", 临时列表(3, 2, 1));

//Label替换
//String字符串
//Label的第
//Stringm
//Label到第
//Stringn
//Label位为
//String字符
function 函数_数_字符_8(字符串, m, n, 字符) {
  定义脚本变量("脚本变量_a", "脚本变量_b");
  if (n >= m) {
    if (m > 1) {
      脚本变量_a = 选择字符串(字符串, 1, m - 1);
      脚本变量_b = 选择字符串(字符串, n + 1, 字符串长度(字符串));
      函数返回(连接字符串(脚本变量_a, 字符, 脚本变量_b));
    } else {
      脚本变量_a = 选择字符串(字符串, n + 1, 字符串长度(字符串));
      函数返回(连接字符串(字符, 脚本变量_a));
    }
  } else {
    函数返回(字符串);
  }
}
函数_数_字符_8("minecraft", 1, 4, "mini");

//Label删除
//String字符串
//Label的
//Custom前["前","后"]
//Stringn
//Label位字符
function 函数_数_字符_3(字符串, 前, n) {
  一步执行(() => {
    定义脚本变量("脚本变量_a");
    脚本变量_a = "";
    遍历循环(1, 字符串长度(字符串), 1, i => {
      if (前 === "前") {
        if (i > n) {
          脚本变量_a = 连接字符串(脚本变量_a, 选择字符串(字符串, i, 1));
        }
      } else {
        if (i <= 字符串长度(字符串) - n) {
          脚本变量_a = 连接字符串(脚本变量_a, 选择字符串(字符串, i, 1));
        }
      }
    });
    函数返回(脚本变量_a);
  });
}
函数_数_字符_3("minecraft", "前", 1);

//Label从
//String字符串
//Label中整体删去
//String字符
function 函数_数_字符_2(字符串, 字符) {
  一步执行(() => {
    定义脚本变量("脚本变量_a", "脚本变量_位置");
    脚本变量_位置 = 临时列表();
    脚本变量_a = "";
    遍历循环(1, 科学计算("10^", 114514), 1, i => {
      if (i > 字符串长度(字符串)) {
        退出循环();
      }
      if (选择字符串(字符串, i, i + (字符串长度(字符) - 1)) === 字符) {
        遍历循环(i, i + (字符串长度(字符) - 1), 1, k => {
          添加列表项(k, 脚本变量_位置);
        });
      }
    });
    遍历循环(1, 字符串长度(字符串), 1, i => {
      if (!判断列表值是否存在(脚本变量_位置, i)) {
        脚本变量_a = 连接字符串(脚本变量_a, 选择字符串(字符串, i, 1));
      }
    });
    函数返回(脚本变量_a);
  });
}
函数_数_字符_2("aabca", "bca");

//Label整体替换
//String字符串
//Label中的
//String字符
//Label为
//String目标字符
function 函数_数_字符_9(字符串, 字符, 目标字符) {
  一步执行(() => {
    定义脚本变量("脚本变量_a", "脚本变量_位置", "脚本变量_状态");
    脚本变量_位置 = 临时列表();
    脚本变量_状态 = 1;
    脚本变量_a = "";
    遍历循环(1, 科学计算("10^", 114514), 1, i => {
      if (i > 字符串长度(字符串)) {
        退出循环();
      }
      if (选择字符串(字符串, i, i + (字符串长度(字符) - 1)) === 字符) {
        遍历循环(i, i + (字符串长度(字符) - 1), 1, k => {
          添加列表项(k, 脚本变量_位置);
        });
      }
    });
    遍历循环(1, 字符串长度(字符串), 1, i => {
      if (!判断列表值是否存在(脚本变量_位置, i)) {
        脚本变量_状态 = 1;
        脚本变量_a = 连接字符串(脚本变量_a, 选择字符串(字符串, i, 1));
      } else {
        if (脚本变量_状态 === 1) {
          脚本变量_状态 = 2;
          脚本变量_a = 连接字符串(脚本变量_a, 目标字符);
        }
      }
    });
    函数返回(脚本变量_a);
  });
}
函数_数_字符_9("minecraft", "mine", "mini");

//String字符串
//Label中第
//Stringn
//Label个
//String字符
//Label的位置
function 函数_数_字符_4(字符串, n, 字符) {
  一步执行(() => {
    定义脚本变量("脚本变量_脚本变量_a");
    脚本变量_a = 临时列表();
    遍历循环(1, 字符串长度(字符串), 1, i => {
      if (选择字符串(字符串, i, 1) === 连接字符串(字符)) {
        添加列表项(i, 脚本变量_a);
      }
    });
    if (n > 列表长度(脚本变量_a) || n === 0) {
      函数返回(0);
    } else {
      函数返回(列表值(脚本变量_a, "第", n));
    }
  });
}
//Custom大写["大写","小写","大小写颠倒"]
//String字符串
function 函数_数_字符_10(大写, 字符串) {
  一步执行(() => {
    定义脚本变量("脚本变量_a");
    脚本变量_a = "";
    遍历循环(1, 字符串长度(字符串), 1, i => {
      if (大写 === "大写") {
        if (字符串包含判断("qwertyuiopasdfghjklzxcvbnm", 选择字符串(字符串, i, 1))) {
          脚本变量_a = 连接字符串(脚本变量_a, 选择字符串("QWERTYUIOPASDFGHJKLZXCVBNM", 函数_数_字符_4("qwertyuiopasdfghjklzxcvbnm", 1, 选择字符串(字符串, i, 1)), 1));
        } else {
          脚本变量_a = 连接字符串(脚本变量_a, 选择字符串(字符串, i, 1));
        }
      } else if (大写 === "小写") {
        if (字符串包含判断("QWERTYUIOPASDFGHJKLZXCVBNM", 选择字符串(字符串, i, 1))) {
          脚本变量_a = 连接字符串(脚本变量_a, 选择字符串("qwertyuiopasdfghjklzxcvbnm", 函数_数_字符_4("QWERTYUIOPASDFGHJKLZXCVBNM", 1, 选择字符串(字符串, i, 1)), 1));
        } else {
          脚本变量_a = 连接字符串(脚本变量_a, 选择字符串(字符串, i, 1));
        }
      } else {
        if (字符串包含判断("QWERTYUIOPASDFGHJKLZXCVBNM", 选择字符串(字符串, i, 1))) {
          脚本变量_a = 连接字符串(脚本变量_a, 选择字符串("qwertyuiopasdfghjklzxcvbnm", 函数_数_字符_4("QWERTYUIOPASDFGHJKLZXCVBNM", 1, 选择字符串(字符串, i, 1)), 1));
        } else if (字符串包含判断("qwertyuiopasdfghjklzxcvbnm", 选择字符串(字符串, i, 1))) {
          脚本变量_a = 连接字符串(脚本变量_a, 选择字符串("QWERTYUIOPASDFGHJKLZXCVBNM", 函数_数_字符_4("qwertyuiopasdfghjklzxcvbnm", 1, 选择字符串(字符串, i, 1)), 1));
        } else {
          脚本变量_a = 连接字符串(脚本变量_a, 选择字符串(字符串, i, 1));
        }
      }
    });
    函数返回(脚本变量_a);
  });
}
函数_数_字符_10("大写", "Abc123AaA");